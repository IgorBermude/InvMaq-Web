import psycopg2
import psycopg2.extras

DB_CONFIG = {
    "host": "localhost",
    "dbname": "maquinasDB",
    "user": "postgres",
    "password": "2025",
    "port": "5432"
}

def get_conn():
    conn = psycopg2.connect(**DB_CONFIG)
    conn.set_client_encoding('UTF8')
    return conn


def init_db():
    try:
        with get_conn() as conn, conn.cursor() as cur:
            cur.execute("""
                CREATE TABLE IF NOT EXISTS maquinas (
                    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                    linha INTEGER,
                    nome TEXT,
                    usuario TEXT,
                    setor TEXT,
                    andar TEXT,
                    ip TEXT,
                    mac TEXT UNIQUE NOT NULL,
                    ponto TEXT,
                    comentario TEXT
                );
            """)
            # Criar a tabela 'historico' com o esquema esperado pelo restante do código
            cur.execute("""
                CREATE TABLE IF NOT EXISTS historico (
                    id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                    id_maquina INTEGER NOT NULL REFERENCES maquinas(id) ON DELETE CASCADE,
                    data DATE,
                    hora TIME,
                    tecnico TEXT,
                    descricao TEXT
                );
            """)
            # Se existir a tabela antiga 'historico_maquinas', migrar os dados para a nova tabela 'historico'
            # Faz a migração apenas dos registros que ainda não existam em 'historico' (evita duplicatas)
            cur.execute("SELECT to_regclass('public.historico_maquinas')")
            old_table = cur.fetchone()[0]
            if old_table is not None:
                # Inserir registros faltantes na nova tabela, mapeando colunas:
                # maquina_id -> id_maquina, created_at -> data/hora, responsavel -> tecnico, evento -> descricao
                cur.execute("""
                    INSERT INTO historico (id, id_maquina, data, hora, tecnico, descricao)
                    SELECT hm.id, hm.maquina_id, hm.created_at::date, hm.created_at::time, hm.responsavel,
                           COALESCE(hm.evento, '') ||
                           COALESCE(' [IP:' || hm.ip || ']', '') ||
                           COALESCE(' [MAC:' || hm.mac || ']', '')
                    FROM historico_maquinas hm
                    LEFT JOIN historico h ON h.id = hm.id
                    WHERE h.id IS NULL
                """)
            conn.commit()
    except Exception as e:
        print(f"Erro ao inicializar DB: {e}")
        raise

def run_query(query, params=None, fetch=False):
    with get_conn() as conn, conn.cursor(cursor_factory=psycopg2.extras.RealDictCursor) as cur:
        cur.execute(query, params)
        if fetch:
            return cur.fetchall()
        conn.commit()

